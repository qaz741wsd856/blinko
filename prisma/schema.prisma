generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider = "zod-prisma-types"
// }

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model accounts {
  id        Int      @id @default(autoincrement())
  name      String   @default("") @db.VarChar
  nickname  String   @default("") @db.VarChar
  password  String   @default("") @db.VarChar
  image     String   @default("") @db.VarChar
  apiToken  String   @default("") @db.VarChar
  note      Int      @default(0)
  role      String   @default("") @db.VarChar
  loginType String   @default("") @db.VarChar
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  notes     notes[]
  configs   config[]
  tags      tag[]
}

model attachments {
  id            Int      @id @default(autoincrement())
  isShare       Boolean  @default(false)
  sharePassword String   @default("") @db.VarChar
  name          String   @default("") @db.VarChar
  path          String   @default("") @db.VarChar
  size          Decimal  @default(0) @db.Decimal
  type          String   @default("") @db.VarChar
  noteId        Int      @default(0)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @db.Timestamptz(6)
  perfixPath    String?  @default("") @db.VarChar // folder1,folder2,folder3
  depth         Int?

  note notes @relation(fields: [noteId], references: [id])
}

model config {
  id     Int       @id @default(autoincrement())
  key    String    @default("") @db.VarChar
  config Json?     @db.Json
  userId Int?
  user   accounts? @relation(fields: [userId], references: [id])
}

model notes {
  id            Int             @id @default(autoincrement())
  type          Int             @default(0)
  content       String          @default("") @db.VarChar
  isArchived    Boolean         @default(false)
  isRecycle     Boolean         @default(false)
  isShare       Boolean         @default(false)
  isTop         Boolean         @default(false)
  isReviewed    Boolean         @default(false)
  sharePassword String          @default("") @db.VarChar
  shareEncryptedUrl String?     @db.VarChar
  shareExpiryDate DateTime?     @db.Timestamptz(6)
  shareMaxView Int?            @default(0)
  shareViewCount Int?          @default(0)
  metadata      Json?           @db.Json
  accountId     Int?
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(6)
  attachments   attachments[]
  tags          tagsToNote[]
  account       accounts?       @relation(fields: [accountId], references: [id])
  referencedBy  noteReference[] @relation("ReferencedNote")
  references    noteReference[] @relation("ReferencingNote")
}

model tag {
  id         Int          @id @default(autoincrement())
  name       String       @default("") @db.VarChar
  icon       String       @default("") @db.VarChar
  parent     Int          @default(0)
  accountId  Int?
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @updatedAt @db.Timestamptz(6)
  tagsToNote tagsToNote[]
  sortOrder  Int          @default(0)
  account    accounts?    @relation(fields: [accountId], references: [id])
}

model tagsToNote {
  id     Int @default(autoincrement())
  noteId Int @default(0)
  tagId  Int @default(0)

  note notes @relation(fields: [noteId], references: [id])
  tag  tag   @relation(fields: [tagId], references: [id])

  @@id([noteId, tagId])
}

model scheduledTask {
  name      String   @id
  schedule  String
  lastRun   DateTime @default(now())
  isSuccess Boolean  @default(true)
  isRunning Boolean  @default(false)
  output    Json?    @db.Json
}

model noteReference {
  id         Int      @id @default(autoincrement())
  fromNoteId Int
  toNoteId   Int
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  fromNote notes @relation("ReferencingNote", fields: [fromNoteId], references: [id])
  toNote   notes @relation("ReferencedNote", fields: [toNoteId], references: [id])

  @@unique([fromNoteId, toNoteId])
}
